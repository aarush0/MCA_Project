# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tI8kaUcoq_LWUlcyb2GsDSOQ0a9WsSpU
"""

import os
import numpy as np
from tensorflow.keras.models import load_model
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import precision_recall_fscore_support
from sklearn.metrics import accuracy_score
from datetime import datetime

def eval(pred_label, test_label, test_mask):

	true_label=[]
	predicted_label=[]

	for i in range(pred_label.shape[0]):
		for j in range(pred_label.shape[1]):
			if test_mask[i,j]==1:
				true_label.append(np.argmax(test_label[i,j] ))
				predicted_label.append(np.argmax(pred_label[i,j] ))


	print("Confusion Matrix :")
	print(confusion_matrix(true_label, predicted_label))
	print("Classification Report :")
	print(classification_report(true_label, predicted_label, digits=4))
	print('Weighted FScore: \n ', precision_recall_fscore_support(true_label, predicted_label, average='weighted'))

def load_file(cwd, nm):
	path = cwd + nm
	x = np.load(path)
	return x


def Load_Model(cwd, nm):
	path = cwd + nm
	model = model = load_model(path)
	return model

def test_text(cwd):
	X = load_file(cwd, 'test_text_X.pkl')
	Y = load_file(cwd, 'test_text_Y.pkl')
	mask = load_file(cwd, 'test_text_mask.pkl')
	model = Load_Model(cwd, 'text_model.h5')

	eval(model.predict(X), Y, mask)

def test_audio(cwd):
	X = load_file(cwd, 'test_audio_X.pkl')
	Y = load_file(cwd, 'test_audio_Y.pkl')
	mask = load_file(cwd, 'test_audio_mask.pkl')
	model = Load_Model(cwd, 'audio_model.h5')

	eval(model.predict(X), Y, mask)

def test_bimodal(cwd):

	import bimodal_code_final as BM

	N = BM.Network1()
	N.load_data("text")
	tl, ti = N.get_text_lstm()

	N.load_data("audio")
	al, ai = N.get_audio_lstm()

	N.get_final_model(tl, al, ti, ai)

	M = N.train_network()

	model = N.merged_model

	eval(model.predict([N.test_x_text, N.test_x_audio]), N.test_y, N.test_mask)

def test_video(cwd):

  X = np.load('/content/drive/My Drive/mca/MCA_Project/Final_files/test_video_X.pkl', allow_pickle=True)
  Y = np.load('/content/drive/My Drive/mca/MCA_Project/Final_files/test_video_Y.pkl', allow_pickle=True)
  X = X.reshape(X.shape[0], 2048)

  model = np.load('/content/drive/My Drive/mca/MCA_Project/Final_files/vgg_balanced.sav', allow_pickle= True)

  Y_pred = model.predict(X)

  Y_p = np.zeros(Y_pred.shape)

  for nt, yt in enumerate(Y_pred):
    Y_p[nt, np.argmax(yt)] = 1

  true_label = []
  predicted_label = []

  for yt in Y:
    true_label.append(np.argmax(yt))

  for yp in Y_p:
    predicted_label.append(np.argmax(yp))

  print("Confusion Matrix :")
  print(confusion_matrix(true_label, predicted_label))
  print("Classification Report :")
  print(classification_report(true_label, predicted_label, digits=4))
  print('Weighted FScore: \n ', precision_recall_fscore_support(true_label, predicted_label, average='weighted'))


#cwd = os.getcwd() + '\\'    // Fow Windows
cwd = '/content/drive/My Drive/mca/MCA_Project/Final_files/'  #For Colab
print(cwd)

print("\n\nText Analysis\n\n")
#test_text(cwd)

print("\n\nAudio Analysis\n\n")
#test_audio(cwd)

print("\n\nBimodal Analysis\n\n")
test_bimodal(cwd)

print("\n\nVideo Analysis\n\n")
#test_video(cwd)

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 1.1x